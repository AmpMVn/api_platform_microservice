<?php

namespace App\Security\Voter\OnlineBooking;

use ApiPlatform\Core\Bridge\Doctrine\Orm\Paginator;
use App\Entity\AbstractEntity;
use App\Entity\OnlineBooking\OnlineBooking;
use Symfony\Component\Security\Core\Authentication\Token\TokenInterface;
use Symfony\Component\Security\Core\Authorization\Voter\Voter;
use Symfony\Component\Security\Core\User\UserInterface;

class OnlineBookingVoter extends Voter
{
    protected function supports(string $attribute, $subject): bool
    {
        $supportsAttribute = in_array($attribute, [
            OnlineBooking::PERMISSION_ . AbstractEntity::PERMISSION_CREATE,
            OnlineBooking::PERMISSION_ . AbstractEntity::PERMISSION_READ,
            OnlineBooking::PERMISSION_ . AbstractEntity::PERMISSION_UPDATE,
            OnlineBooking::PERMISSION_ . AbstractEntity::PERMISSION_DELETE,
            OnlineBooking::PERMISSION_ . AbstractEntity::PERMISSION_COLLECTION_ . AbstractEntity::PERMISSION_READ,
            ]
        );
        $supportsSubject = $subject instanceof OnlineBooking;
        $supportsPaginator = $subject instanceof Paginator;

        return $supportsAttribute && ($supportsSubject || $supportsPaginator);
    }

    protected function voteOnAttribute(string $attribute, $subject, TokenInterface $token): bool
    {
        /** @var OnlineBooking $subject */
        $user = $token->getUser();

        // if the user is anonymous, do not grant access
        if (!$user instanceof UserInterface) {
            return false;
        }

        if($subject instanceof Paginator) {
            return true;
        }

        $role = get_class($subject) . '_' . $subject->getId() . '_' . str_replace(OnlineBooking::PERMISSION_, null, $attribute);

        if(in_array($role, $token->getRoleNames()))
        {
            return true;
        }

        return false;
    }
}
